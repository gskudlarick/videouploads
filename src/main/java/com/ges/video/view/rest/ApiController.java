package com.ges.video.view.rest;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.ges.video.Application;
import com.ges.video.domain.other.Greeting;
import com.ges.video.domain.video.Video;
import com.ges.video.domain.video.VideoRepository;

@RestController
public class ApiController {

    private static final String template = "Hello, %s!";
    private final AtomicLong counter = new AtomicLong();
    
    private static final Logger logger = LoggerFactory.getLogger(Application.class);
    
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private VideoRepository videoRepository;

	//https://spring.io/guides/gs/rest-service-cors/  -- empty means OPEN
	//@CrossOrigin(origins = "http://localhost:8080")
    @RequestMapping("/video")
    public Video video(@RequestParam(value="media_id", defaultValue="0") int mediaId) {
    	
    	Video video = new Video();
    	video.setMediaId(mediaId);
    	video.setName("605 Modie");
    	// TODO get from JPA
    	//video = videoRepository.findOne((long) mediaId);
    	video = videoRepository.findByMediaId(mediaId);
    	return video;
    }
    
    @RequestMapping("/videos")
    public List<Video> videos() {
    	
    	List<Video> videos = new ArrayList<Video>();
    	Video video = new Video();
    	video.setMediaId(1);
    	video.setName("605 Movie 1");
    	videos.add(video);
    	
    	Video video2 = new Video();
    	video2.setMediaId(2);
    	video2.setName("605 Movie 2");
    	videos.add(video2);
    	// TODO get from JPA
    	 //return unitService.findAll();
    	List<Video> videoList = (List<Video>) videoRepository.findAll();
    	return videoList;
    }
    
   
    
    //TODO's videos. 
    
    // TODO DEL
    @RequestMapping("/greeting")
    public Greeting greeting(@RequestParam(value="name", defaultValue="World") String name, HttpServletRequest request, 
	        HttpServletResponse response) {
    	
		 Authentication auth = SecurityContextHolder.getContext().getAuthentication();
	     String userName = auth.getName(); //get logged in username
		String ipAddress = this.getIpAddr(request);
		logger.info("Path: /greeting, Username: " + userName + ", Login From IP: " + ipAddress);
		
        return new Greeting(counter.incrementAndGet(),
                            String.format(template, name));
    }
    
    @RequestMapping("/greetingOpen")
    public Greeting greetingOpen(@RequestParam(value="name", defaultValue="World") String name,HttpServletRequest request, 
	        HttpServletResponse response) {
    	
		 Authentication auth = SecurityContextHolder.getContext().getAuthentication();
	     String userName = auth.getName(); //get logged in username
		String ipAddress = this.getIpAddr(request);
		logger.info("Path: /greetingOpen, Username: " + userName + ", Login From IP: " + ipAddress);
    	
        return new Greeting(counter.incrementAndGet(),
                            String.format(template, name));
    }
    
    
	public String getIpAddr(HttpServletRequest request) {      
		   String ip = request.getHeader("x-forwarded-for");      
		   if(ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {      
		       ip = request.getHeader("Proxy-Client-IP");      
		   }      
		   if(ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {      
		       ip = request.getHeader("WL-Proxy-Client-IP");      
		   }      
		   if(ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {      
		       ip = request.getRemoteAddr();      
		   }      
		   return ip;      
		}
}